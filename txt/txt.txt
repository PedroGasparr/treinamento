<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Treinamento - GZL Treinamentos</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="./CSS/primeiros-socorros.css">
    <style>
        /* Estilos para o chat */
        .chat-icon {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background-color: #4285f4;
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 1000;
            transition: all 0.3s ease;
        }
        
        .chat-icon:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
        
        .chat-container {
            position: fixed;
            bottom: 100px;
            right: 30px;
            width: 350px;
            height: 500px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
            display: none;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        }
        
        .chat-header {
            background-color: #4285f4;
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            background-color: #f9f9f9;
        }
        
        .chat-input-area {
            padding: 10px;
            border-top: 1px solid #eee;
            background-color: white;
        }
        
        .chat-input {
            display: flex;
            margin-bottom: 10px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        
        .chat-input button {
            margin-left: 10px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 0 15px;
            cursor: pointer;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.4;
            position: relative;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background-color: #4285f4;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }
        
        .bot-message {
            background-color: #e9e9e9;
            color: #333;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }
        
        .audio-message {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            border-radius: 18px;
            background-color: #f0f0f0;
            margin-bottom: 10px;
        }
        
        .close-chat {
            cursor: pointer;
            font-size: 20px;
        }
        
        .typing-indicator {
            display: none;
            margin-bottom: 15px;
            padding: 10px 15px;
            background-color: #e9e9e9;
            border-radius: 18px;
            width: fit-content;
        }
        
        .typing-indicator span {
            height: 10px;
            width: 10px;
            background-color: #666;
            border-radius: 50%;
            display: inline-block;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }
        
        .audio-button {
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin: 0 5px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .audio-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        
        #audioTimer {
            margin-top: 5px;
            font-size: 12px;
            color: #666;
            text-align: center;
        }
        
        .recording {
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(234, 67, 53, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(234, 67, 53, 0); }
            100% { box-shadow: 0 0 0 0 rgba(234, 67, 53, 0); }
        }
        
        .audio-controls {
            display: none;
            flex-direction: column;
            align-items: center;
            padding: 10px;
        }
        
        .audio-buttons-row {
            display: flex;
            justify-content: center;
            margin-bottom: 5px;
        }
        
        .audio-visualizer {
            width: 100%;
            height: 30px;
            margin: 5px 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .audio-visualizer-bar {
            width: 3px;
            height: 10px;
            margin: 0 1px;
            background-color: #4285f4;
            border-radius: 3px;
            animation: visualizerAnimation 0.8s infinite ease-in-out alternate;
        }
        
        @keyframes visualizerAnimation {
            from { height: 5px; }
            to { height: 20px; }
        }
        
        .play-audio-button {
            background-color: #34a853;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 5px 15px;
            margin-top: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .play-audio-button i {
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <!-- Menu Lateral -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>GZL Treinamentos</h2>
            <p>Bem-vindo, <span id="userName"></span></p>
        </div>
        <ul class="sidebar-menu">
            <li id="menuHome">
                <i class="material-icons">home</i> Home
            </li>
            <li id="menuProfile">
                <i class="material-icons">person</i> Perfil
            </li>
            <li id="menuCompleted">
                <i class="material-icons">check_circle</i> Concluídos
            </li>
            <li id="menuLogout">
                <i class="material-icons">logout</i> Sair
            </li>
        </ul>
    </div>

    <!-- Conteúdo Principal -->
    <div class="main-content">
        <div class="header">
            <h1 class="page-title" id="trainingTitle">Carregando treinamento...</h1>
        </div>
        
        <div class="training-content">
            <div id="videosContainer"></div>
            <div id="quizContainer" class="quiz-container" style="display:none;"></div>
            <div class="training-completed" id="trainingCompleted" style="display:none;">
                <h2><i class="material-icons">check_circle</i> Treinamento Concluído com Sucesso!</h2>
                <p>Você completou todas as aulas e a prova final. Parabéns!</p>
                <p id="validityMessage"></p>
                <p>Seu certificado estará disponível em seu perfil.</p>
            </div>
        </div>
    </div>

    <!-- Chat IA -->
    <div class="chat-icon" id="chatIcon">
        <i class="material-icons">chat</i>
    </div>
    
    <div class="chat-container" id="chatContainer">
        <div class="chat-header">
            <span>Assistente IA</span>
            <span class="close-chat" id="closeChat">&times;</span>
        </div>
        <div class="chat-messages" id="chatMessages">
            <div class="message bot-message">
                Olá! Eu sou Laura, assistente virtual da GZL Treinamentos. Como posso te ajudar hoje?
            </div>
        </div>
        <div class="typing-indicator" id="typingIndicator">
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="chat-input-area">
            <div class="audio-controls" id="audioControls">
                <div class="audio-buttons-row">
                    <button id="startRecording" class="audio-button">
                        <i class="material-icons">mic</i>
                    </button>
                    <button id="stopRecording" class="audio-button" disabled>
                        <i class="material-icons">stop</i>
                    </button>
                    <button id="playAudio" class="audio-button" disabled>
                        <i class="material-icons">play_arrow</i>
                    </button>
                    <button id="sendAudio" class="audio-button" disabled>
                        <i class="material-icons">send</i>
                    </button>
                </div>
                <div class="audio-visualizer" id="audioVisualizer">
                    <div class="audio-visualizer-bar" style="animation-delay: 0s"></div>
                    <div class="audio-visualizer-bar" style="animation-delay: 0.1s"></div>
                    <div class="audio-visualizer-bar" style="animation-delay: 0.2s"></div>
                    <div class="audio-visualizer-bar" style="animation-delay: 0.3s"></div>
                    <div class="audio-visualizer-bar" style="animation-delay: 0.4s"></div>
                </div>
                <div id="audioTimer">00:00</div>
            </div>
            <div class="chat-input">
                <button id="toggleAudio" class="audio-button" style="margin-right: 10px;">
                    <i class="material-icons" id="toggleAudioIcon">keyboard_voice</i>
                </button>
                <input type="text" id="userInput" placeholder="Digite sua dúvida..." autocomplete="off">
                <button id="sendMessage"><i class="material-icons">send</i></button>
            </div>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-database-compat.js"></script>
    <script src="https://www.youtube.com/iframe_api"></script>

    <script>
        // Configuração do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyDEkkRm5s1QieOXz7rdxJEE_nTuOQAfm1Y",
            authDomain: "gzltreinamentos.firebaseapp.com",
            databaseURL: "https://gzltreinamentos-default-rtdb.firebaseio.com",
            projectId: "gzltreinamentos",
            storageBucket: "gzltreinamentos.appspot.com",
            messagingSenderId: "991106826698",
            appId: "1:991106826698:web:be17262818bdc0e04c4f33",
            measurementId: "G-CG2PSQQ35G"
        };

        // Inicialização do Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();

        // Variáveis globais
        let currentUser = null;
        let currentTrainingId = null;
        let currentTrainingData = {};
        let userTrainingProgress = {};
        let videoPlayers = [];
        let currentVideoIndex = 0;

        // Variáveis para controle de áudio
        let mediaRecorder;
        let audioChunks = [];
        let recordingStartTime;
        let recordingTimer;
        let audioContext;
        let analyser;
        let microphone;
        let dataArray;
        let animationId;
        let isAudioMode = false;
        let audioQueue = [];
        let isPlayingAudio = false;

        // Elementos do Chat IA
        const chatIcon = document.getElementById('chatIcon');
        const chatContainer = document.getElementById('chatContainer');
        const closeChat = document.getElementById('closeChat');
        const sendMessage = document.getElementById('sendMessage');
        const userInput = document.getElementById('userInput');
        const chatMessages = document.getElementById('chatMessages');
        const typingIndicator = document.getElementById('typingIndicator');
        const toggleAudio = document.getElementById('toggleAudio');
        const toggleAudioIcon = document.getElementById('toggleAudioIcon');
        const audioControls = document.getElementById('audioControls');
        const startRecording = document.getElementById('startRecording');
        const stopRecording = document.getElementById('stopRecording');
        const playAudio = document.getElementById('playAudio');
        const sendAudio = document.getElementById('sendAudio');
        const audioTimer = document.getElementById('audioTimer');
        const audioVisualizer = document.getElementById('audioVisualizer');

        // Alternar visibilidade do chat
        chatIcon.addEventListener('click', toggleChat);
        closeChat.addEventListener('click', toggleChat);

        function toggleChat() {
            chatContainer.style.display = chatContainer.style.display === 'flex' ? 'none' : 'flex';
            if (chatContainer.style.display === 'flex') {
                userInput.focus();
            }
        }

        // Alternar entre modo texto e áudio
        toggleAudio.addEventListener('click', () => {
            isAudioMode = !isAudioMode;
            if (isAudioMode) {
                toggleAudioIcon.textContent = 'keyboard';
                audioControls.style.display = 'flex';
                userInput.placeholder = "Ou grave um áudio...";
                initAudioContext();
            } else {
                toggleAudioIcon.textContent = 'keyboard_voice';
                audioControls.style.display = 'none';
                userInput.placeholder = "Digite sua dúvida...";
                stopRecordingAudio();
            }
        });

        // Inicializar contexto de áudio
        function initAudioContext() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                analyser.fftSize = 32;
                dataArray = new Uint8Array(analyser.frequencyBinCount);
            }
        }

        // Iniciar gravação de áudio
        startRecording.addEventListener('click', startRecordingAudio);
        
        async function startRecordingAudio() {
            try {
                audioChunks = [];
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                
                // Conectar o microfone ao analisador para visualização
                microphone = audioContext.createMediaStreamSource(stream);
                microphone.connect(analyser);
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };
                
                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    
                    // Criar elemento de áudio para pré-visualização
                    const previewAudio = new Audio(audioUrl);
                    playAudio.onclick = () => {
                        previewAudio.play();
                    };
                    
                    playAudio.disabled = false;
                    sendAudio.disabled = false;
                    
                    // Parar o stream
                    stream.getTracks().forEach(track => track.stop());
                    
                    // Parar a visualização
                    cancelAnimationFrame(animationId);
                    audioVisualizer.style.display = 'none';
                };
                
                mediaRecorder.start();
                startRecording.classList.add('recording');
                stopRecording.disabled = false;
                playAudio.disabled = true;
                sendAudio.disabled = true;
                
                // Iniciar temporizador
                recordingStartTime = Date.now();
                updateTimer();
                recordingTimer = setInterval(updateTimer, 1000);
                
                // Mostrar visualizador de áudio
                audioVisualizer.style.display = 'flex';
                visualizeAudio();
                
            } catch (error) {
                console.error("Erro ao acessar o microfone:", error);
                addMessage("Não foi possível acessar o microfone. Verifique as permissões.", 'bot');
            }
        }

        // Atualizar temporizador de gravação
        function updateTimer() {
            const seconds = Math.floor((Date.now() - recordingStartTime) / 1000);
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            audioTimer.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        }

        // Visualizar áudio
        function visualizeAudio() {
            analyser.getByteFrequencyData(dataArray);
            
            const bars = audioVisualizer.querySelectorAll('.audio-visualizer-bar');
            bars.forEach((bar, i) => {
                const value = dataArray[i] || 0;
                const height = Math.max(5, value / 2);
                bar.style.height = `${height}px`;
            });
            
            animationId = requestAnimationFrame(visualizeAudio);
        }

        // Parar gravação de áudio
        stopRecording.addEventListener('click', stopRecordingAudio);
        
        function stopRecordingAudio() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                clearInterval(recordingTimer);
                startRecording.classList.remove('recording');
                stopRecording.disabled = true;
            }
        }

        // Enviar áudio para a IA
        sendAudio.addEventListener('click', sendAudioToAI);
        
        async function sendAudioToAI() {
            if (audioChunks.length === 0) return;
            
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            const formData = new FormData();
            formData.append('audio', audioBlob, 'recording.wav');
            
            // Mostrar mensagem de áudio do usuário
            addAudioMessage('user', 'Áudio enviado');
            
            // Mostrar que a IA está processando
            showTypingIndicator();
            
            try {
                // Aqui você precisaria implementar o envio do áudio para seu backend
                // que converteria o áudio em texto usando uma API como a do Google Speech-to-Text
                // e então enviaria para a Groq API
                
                // Simulação - em produção, substitua por uma chamada real ao seu backend
                const response = await simulateAudioProcessing(audioBlob);
                
                // Adicionar resposta da IA
                addMessage(response, 'bot');
                
                // Se você quiser que a IA responda em áudio também:
                await textToSpeech(response);
                
            } catch (error) {
                console.error("Erro ao processar áudio:", error);
                addMessage("Ocorreu um erro ao processar seu áudio. Por favor, tente novamente.", 'bot');
            } finally {
                hideTypingIndicator();
                playAudio.disabled = true;
                sendAudio.disabled = true;
            }
        }

        // Simular processamento de áudio (substitua por chamada real ao backend)
        async function simulateAudioProcessing(audioBlob) {
            // Em um ambiente real, você enviaria o áudio para seu backend
            // que converteria para texto e enviaria para a Groq API
            // Aqui estamos apenas simulando uma resposta
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve("Obrigado pelo seu áudio! Aqui está uma resposta simulada. Em produção, isso seria convertido de áudio para texto e processado pela IA.");
                }, 1500);
            });
        }

        // Converter texto em fala (resposta em áudio)
        async function textToSpeech(text) {
            if (!('speechSynthesis' in window)) {
                console.log("API de síntese de fala não suportada");
                return;
            }
            
            return new Promise((resolve) => {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'pt-BR';
                utterance.rate = 1.0;
                utterance.pitch = 1.0;
                
                // Adicionar mensagem de áudio do bot
                addAudioMessage('bot', 'Resposta em áudio');
                
                utterance.onend = () => {
                    resolve();
                };
                
                speechSynthesis.speak(utterance);
            });
        }

        // Adicionar mensagem de áudio ao chat
        function addAudioMessage(sender, label) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message audio-message`;
            
            messageDiv.innerHTML = `
                <i class="material-icons">mic</i>
                <span style="margin-left: 8px;">${label}</span>
                <button class="play-audio-button" onclick="playLastAudio('${sender}')">
                    <i class="material-icons">play_arrow</i>
                    Ouvir
                </button>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Função global para reproduzir o último áudio (simulação)
        window.playLastAudio = function(sender) {
            // Em produção, isso reproduziria o áudio real gravado ou gerado
            alert(`Reproduzindo áudio ${sender === 'user' ? 'enviado' : 'recebido'}`);
        };

        // Adicionar mensagem ao chat
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Se for uma mensagem do bot e estiver no modo áudio, converter para fala
            if (sender === 'bot' && isAudioMode) {
                textToSpeech(text);
            }
        }

        // Mostrar indicador de digitação
        function showTypingIndicator() {
            typingIndicator.style.display = 'block';
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Esconder indicador de digitação
        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }

        // Função para buscar a API Key do Firebase
        async function getApiKeyFromFirebase() {
            try {
                const snapshot = await database.ref('apiKeys/groq').once('value');
                const apiData = snapshot.val();
                
                if (apiData && apiData.key) {
                    return apiData.key;
                } else {
                    throw new Error('API Key não encontrada no banco de dados');
                }
            } catch (error) {
                console.error('Erro ao buscar API Key:', error);
                throw error;
            }
        }

        // Enviar mensagem para a IA (versão ajustada)
        async function queryGroqFree(message) {
            try {
                // Busca a API Key do Firebase
                const apiKey = await getApiKeyFromFirebase();
                
                const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${apiKey}`,
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        model: "llama3-70b-8192",
                        messages: [
                            {
                                role: "system",
                                content: `Você é Laura assistente virtual da GZL Treinamentos. Sua função é:
                                         - Tirar dúvidas sobre o funcionamento dos treinamentos (certificados, prazos, acesso, etc.)
                                         - Orientar sobre como navegar na plataforma
                                         - Fornecer informações sobre suporte técnico
                                         - e outra duvidas e conteudos fora do sistema, voce pode ter sua propria personalidade e seu nome sera Laura a assistente virtual da GZL Treinamentos`
                            },
                            { 
                                role: "user", 
                                content: message 
                            }
                        ],
                        temperature: 0.7,
                        max_tokens: 300
                    }),
                });
                
                if (!response.ok) {
                    throw new Error(`Erro na API: ${response.status}`);
                }
                
                const data = await response.json();
                return data.choices[0]?.message?.content;
                
            } catch (error) {
                console.error('Erro ao consultar a IA:', error);
                return "Desculpe, estou tendo problemas para me conectar ao serviço. Por favor, tente novamente mais tarde.";
            }
        }

        // Enviar mensagem do usuário (versão ajustada)
        function sendUserMessage() {
            const message = userInput.value.trim();
            if (!message) return;

            addMessage(message, 'user');
            userInput.value = '';
            
            // Mostrar indicador de digitação
            showTypingIndicator();
            
            // Enviar para a IA
            queryGroqFree(message)
                .then(response => {
                    addMessage(response, 'bot');
                })
                .catch(error => {
                    console.error("Erro:", error);
                    addMessage("Ocorreu um erro ao processar sua mensagem. Por favor, tente novamente.", 'bot');
                })
                .finally(() => {
                    hideTypingIndicator();
                });
        }

        // Event listeners para o chat
        sendMessage.addEventListener('click', sendUserMessage);
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendUserMessage();
            }
        });

        // Quando a página carrega
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            currentTrainingId = urlParams.get('id');
            
            if (!currentTrainingId) {
                alert('Treinamento não especificado!');
                window.location.href = 'home.html';
                return;
            }

            auth.onAuthStateChanged((user) => {
                if (user) {
                    currentUser = user;
                    document.getElementById('userName').textContent = user.displayName || user.email.split('@')[0];
                    loadTrainingData();
                } else {
                    window.location.href = 'index.html';
                }
            });
        });

        // Carrega os dados do treinamento
        function loadTrainingData() {
            database.ref(`trainings/${currentTrainingId}`).once('value').then((trainingSnapshot) => {
                currentTrainingData = trainingSnapshot.val();
                
                if (!currentTrainingData) {
                    alert('Treinamento não encontrado!');
                    window.location.href = 'home.html';
                    return;
                }
                
                document.getElementById('trainingTitle').textContent = currentTrainingData.name;
                
                return database.ref(`userTrainings/${currentUser.uid}/${currentTrainingId}`).once('value');
            }).then((progressSnapshot) => {
                userTrainingProgress = progressSnapshot.val() || {};
                
                console.log('Progresso carregado:', userTrainingProgress);
                
                initializeTrainingPage();
            }).catch((error) => {
                console.error("Erro ao carregar dados:", error);
                alert('Erro ao carregar treinamento!');
            });
        }

        // Inicializa a página do treinamento
        function initializeTrainingPage() {
            const isTrainingCompleted = () => {
                if (!userTrainingProgress) return false;
                
                const hasRequiredFields = 
                    userTrainingProgress.quizCompleted === true &&
                    userTrainingProgress.completedAt &&
                    typeof userTrainingProgress.quizScore === 'number';
                
                let videosCompleted = true;
                if (currentTrainingData.videos && currentTrainingData.videos.length > 0) {
                    for (let i = 0; i < currentTrainingData.videos.length; i++) {
                        const videoNumber = i + 1;
                        if (!userTrainingProgress[`video${videoNumber}`] || 
                            userTrainingProgress[`video${videoNumber}`].progress !== 100) {
                            videosCompleted = false;
                            break;
                        }
                    }
                }
                
                return hasRequiredFields && videosCompleted;
            };

            if (isTrainingCompleted()) {
                console.log('DEBUG: Exibindo tela de conclusão - Dados:', {
                    quizCompleted: userTrainingProgress.quizCompleted,
                    quizScore: userTrainingProgress.quizScore,
                    videos: currentTrainingData.videos?.map((_, i) => ({
                        videoNumber: i + 1,
                        progress: userTrainingProgress[`video${i+1}`]?.progress
                    }))
                });
                
                showTrainingCompletion();
                return;
            }

            console.log('DEBUG: Continuando treinamento - Motivo:', {
                userProgressExists: !!userTrainingProgress,
                quizCompleted: userTrainingProgress?.quizCompleted,
                quizScore: userTrainingProgress?.quizScore,
                videosProgress: currentTrainingData.videos?.map((_, i) => ({
                    videoNumber: i + 1,
                    progress: userTrainingProgress?.[`video${i+1}`]?.progress,
                    completed: userTrainingProgress?.[`video${i+1}`]?.progress === 100
                }))
            });

            determineCurrentVideo();
            renderVideos();
            
            if (shouldShowQuiz()) {
                showQuiz();
            }
        }

        // Determina qual vídeo deve ser mostrado
        function determineCurrentVideo() {
            if (!currentTrainingData.videos || currentTrainingData.videos.length === 0) {
                currentVideoIndex = -1;
                return;
            }
            
            currentVideoIndex = 0;
            for (let i = 0; i < currentTrainingData.videos.length; i++) {
                const videoNumber = i + 1;
                if (!userTrainingProgress[`video${videoNumber}`] || userTrainingProgress[`video${videoNumber}`].progress !== 100) {
                    currentVideoIndex = i;
                    break;
                }
            }
        }

        // Renderiza os vídeos do treinamento
        function renderVideos() {
            const videosContainer = document.getElementById('videosContainer');
            videosContainer.innerHTML = '';
            
            if (!currentTrainingData.videos || currentTrainingData.videos.length === 0) {
                videosContainer.innerHTML = '<p>Este treinamento não possui vídeos.</p>';
                return;
            }
            
            const sortedVideos = [...currentTrainingData.videos].sort((a, b) => (a.order || 0) - (b.order || 0));
            
            sortedVideos.forEach((video, index) => {
                const videoNumber = index + 1;
                const isCompleted = userTrainingProgress[`video${videoNumber}`]?.progress === 100;
                const isAvailable = videoNumber === 1 || 
                                   userTrainingProgress[`video${videoNumber-1}`]?.progress === 100 ||
                                   userTrainingProgress[`video${videoNumber}`]?.available;
                
                const videoContainer = document.createElement('div');
                videoContainer.className = 'video-container';
                videoContainer.id = `video${videoNumber}-container`;
                
                let videoStatusIcon = 'lock';
                let statusClass = 'locked';
                
                if (isAvailable) {
                    videoStatusIcon = isCompleted ? 'check_circle' : 'play_circle_outline';
                    statusClass = isCompleted ? 'completed' : 'pending';
                }
                
                videoContainer.innerHTML = `
                    <div class="video-status">
                        <i class="material-icons ${statusClass}">${videoStatusIcon}</i>
                        <span>Aula ${videoNumber}: ${video.title}</span>
                    </div>
                    <div class="video-wrapper">
                        <div id="video${videoNumber}"></div>
                        ${!isAvailable ? `
                        <div class="video-locked-message" id="locked-message${videoNumber}">
                            Complete a Aula ${videoNumber-1} para desbloquear este conteúdo
                        </div>
                        ` : ''}
                        <div class="video-loading" id="videoLoading${videoNumber}" style="display:none;">
                            Carregando próxima aula...
                        </div>
                    </div>
                `;
                
                videosContainer.appendChild(videoContainer);
                
                if (isAvailable) {
                    setupVideoPlayer(videoNumber, video.url);
                }
            });
        }

        // Extrai ID do vídeo do YouTube
        function extractVideoId(url) {
            if (!url) return '';
            const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
            const match = url.match(regExp);
            return (match && match[2].length === 11) ? match[2] : '';
        }

        // Configura o player de vídeo
        function setupVideoPlayer(videoNumber, videoUrl) {
            const videoId = extractVideoId(videoUrl);
            
            videoPlayers[videoNumber] = new YT.Player(`video${videoNumber}`, {
                height: '360',
                width: '640',
                videoId: videoId,
                playerVars: {
                    'autoplay': 0,
                    'controls': 0,
                    'modestbranding': 1,
                    'rel': 0,
                    'enablejsapi': 1
                },
                events: {
                    'onReady': (event) => onPlayerReady(event, videoNumber),
                    'onStateChange': (event) => onPlayerStateChange(event, videoNumber)
                }
            });
        }

        // Quando o player está pronto
        function onPlayerReady(event, videoNumber) {
            if (videoNumber === currentVideoIndex + 1 && 
                (!userTrainingProgress[`video${videoNumber}`] || userTrainingProgress[`video${videoNumber}`].progress !== 100)) {
                event.target.playVideo();
            }
        }

        // Monitora estados do vídeo
        function onPlayerStateChange(event, videoNumber) {
            if (event.data === YT.PlayerState.ENDED) {
                if (!userTrainingProgress[`video${videoNumber}`]?.progress) {
                    markVideoAsCompleted(videoNumber).then(() => {
                        handleVideoCompletion(videoNumber);
                    });
                } else {
                    handleVideoCompletion(videoNumber);
                }
            }
        }

        // Manipula a conclusão do vídeo
        // Manipula a conclusão do vídeo
function handleVideoCompletion(videoNumber) {
    // Mostrar mensagem de conclusão
    const videoContainer = document.getElementById(`video${videoNumber}-container`);
    if (videoContainer) {
        const completionMessage = document.createElement('div');
        completionMessage.className = 'video-completion-message';
        completionMessage.innerHTML = `
            <i class="material-icons">check_circle</i>
            <span>Aula concluída com sucesso!</span>
        `;
        videoContainer.appendChild(completionMessage);
    }

    // Verificar se há próximo vídeo
    const nextVideoNumber = videoNumber + 1;
    if (currentTrainingData.videos && nextVideoNumber <= currentTrainingData.videos.length) {
        // Mostrar loading para o próximo vídeo
        const nextVideoLoading = document.getElementById(`videoLoading${nextVideoNumber}`);
        if (nextVideoLoading) {
            nextVideoLoading.style.display = 'block';
        }

        // Atualizar progresso no banco de dados para marcar o próximo vídeo como disponível
        database.ref(`userTrainings/${currentUser.uid}/${currentTrainingId}/video${nextVideoNumber}`).update({
            available: true
        }).then(() => {
            // Atualizar localmente
            if (!userTrainingProgress[`video${nextVideoNumber}`]) {
                userTrainingProgress[`video${nextVideoNumber}`] = {};
            }
            userTrainingProgress[`video${nextVideoNumber}`].available = true;

            // Configurar o próximo vídeo após um pequeno delay
            setTimeout(() => {
                const nextVideo = currentTrainingData.videos[nextVideoNumber - 1];
                setupVideoPlayer(nextVideoNumber, nextVideo.url);
                
                // Remover loading
                if (nextVideoLoading) {
                    nextVideoLoading.style.display = 'none';
                }
                
                // Atualizar status na UI
                const nextVideoContainer = document.getElementById(`video${nextVideoNumber}-container`);
                if (nextVideoContainer) {
                    const statusIcon = nextVideoContainer.querySelector('.video-status i');
                    if (statusIcon) {
                        statusIcon.textContent = 'play_circle_outline';
                        statusIcon.className = 'material-icons pending';
                    }
                    
                    // Remover mensagem de bloqueio se existir
                    const lockedMessage = document.getElementById(`locked-message${nextVideoNumber}`);
                    if (lockedMessage) {
                        lockedMessage.remove();
                    }
                }
            }, 1500);
        });
    } else {
        // Se não há mais vídeos, verificar se pode mostrar o quiz
        if (shouldShowQuiz()) {
            showQuiz();
        }
    }
}

// Marca vídeo como concluído no banco de dados
function markVideoAsCompleted(videoNumber) {
    const updates = {};
    updates[`video${videoNumber}/progress`] = 100;
    updates[`video${videoNumber}/completedAt`] = firebase.database.ServerValue.TIMESTAMP;

    // Se for o primeiro vídeo, marcar o treinamento como iniciado
    if (videoNumber === 1 && !userTrainingProgress.startedAt) {
        updates['startedAt'] = firebase.database.ServerValue.TIMESTAMP;
    }

    return database.ref(`userTrainings/${currentUser.uid}/${currentTrainingId}`).update(updates)
        .then(() => {
            // Atualizar localmente
            if (!userTrainingProgress[`video${videoNumber}`]) {
                userTrainingProgress[`video${videoNumber}`] = {};
            }
            userTrainingProgress[`video${videoNumber}`].progress = 100;
            userTrainingProgress[`video${videoNumber}`].completedAt = Date.now();
            
            if (videoNumber === 1 && !userTrainingProgress.startedAt) {
                userTrainingProgress.startedAt = Date.now();
            }
        });
}

// Verifica se deve mostrar o quiz
function shouldShowQuiz() {
    // Verificar se já foi concluído
    if (userTrainingProgress.quizCompleted) {
        return false;
    }

    // Verificar se todos os vídeos foram concluídos
    if (currentTrainingData.videos && currentTrainingData.videos.length > 0) {
        for (let i = 0; i < currentTrainingData.videos.length; i++) {
            const videoNumber = i + 1;
            if (!userTrainingProgress[`video${videoNumber}`] || userTrainingProgress[`video${videoNumber}`].progress !== 100) {
                return false;
            }
        }
    }

    // Verificar se o quiz existe
    return currentTrainingData.quiz && currentTrainingData.quiz.questions && currentTrainingData.quiz.questions.length > 0;
}

// Mostra o quiz
function showQuiz() {
    const quizContainer = document.getElementById('quizContainer');
    const videosContainer = document.getElementById('videosContainer');
    
    // Esconder vídeos
    videosContainer.style.display = 'none';
    
    // Mostrar quiz
    quizContainer.style.display = 'block';
    quizContainer.innerHTML = '';
    
    // Adicionar título
    const quizTitle = document.createElement('h2');
    quizTitle.textContent = 'Prova Final';
    quizContainer.appendChild(quizTitle);
    
    // Adicionar descrição
    const quizDescription = document.createElement('p');
    quizDescription.textContent = 'Responda corretamente às perguntas abaixo para concluir o treinamento.';
    quizContainer.appendChild(quizDescription);
    
    // Criar formulário do quiz
    const quizForm = document.createElement('form');
    quizForm.id = 'quizForm';
    
    // Adicionar perguntas
    currentTrainingData.quiz.questions.forEach((question, index) => {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'quiz-question';
        
        const questionText = document.createElement('h3');
        questionText.textContent = `${index + 1}. ${question.question}`;
        questionDiv.appendChild(questionText);
        
        // Adicionar opções
        question.options.forEach((option, optionIndex) => {
            const optionDiv = document.createElement('div');
            optionDiv.className = 'quiz-option';
            
            const input = document.createElement('input');
            input.type = 'radio';
            input.id = `q${index}_o${optionIndex}`;
            input.name = `question_${index}`;
            input.value = optionIndex;
            
            const label = document.createElement('label');
            label.htmlFor = `q${index}_o${optionIndex}`;
            label.textContent = option;
            
            optionDiv.appendChild(input);
            optionDiv.appendChild(label);
            questionDiv.appendChild(optionDiv);
        });
        
        quizForm.appendChild(questionDiv);
    });
    
    // Adicionar botão de envio
    const submitButton = document.createElement('button');
    submitButton.type = 'button';
    submitButton.textContent = 'Enviar Respostas';
    submitButton.addEventListener('click', submitQuiz);
    
    quizForm.appendChild(submitButton);
    quizContainer.appendChild(quizForm);
}

// Submete o quiz
function submitQuiz() {
    const quizForm = document.getElementById('quizForm');
    const inputs = quizForm.querySelectorAll('input[type="radio"]:checked');
    
    // Verificar se todas as perguntas foram respondidas
    if (inputs.length < currentTrainingData.quiz.questions.length) {
        alert('Por favor, responda todas as perguntas antes de enviar.');
        return;
    }
    
    // Calcular pontuação
    let score = 0;
    const answers = [];
    
    currentTrainingData.quiz.questions.forEach((question, index) => {
        const selectedOption = quizForm.querySelector(`input[name="question_${index}"]:checked`).value;
        answers.push(parseInt(selectedOption));
        
        if (parseInt(selectedOption) === question.correctAnswer) {
            score++;
        }
    });
    
    // Verificar se passou
    const passingScore = currentTrainingData.quiz.passingScore || 
                        Math.ceil(currentTrainingData.quiz.questions.length * 0.7);
    const passed = score >= passingScore;
    
    // Atualizar no banco de dados
    const updates = {
        quizCompleted: true,
        quizScore: score,
        quizAnswers: answers,
        completedAt: firebase.database.ServerValue.TIMESTAMP
    };
    
    if (passed) {
        updates.status = 'completed';
    } else {
        updates.status = 'failed';
    }
    
    database.ref(`userTrainings/${currentUser.uid}/${currentTrainingId}`).update(updates)
        .then(() => {
            // Atualizar localmente
            userTrainingProgress.quizCompleted = true;
            userTrainingProgress.quizScore = score;
            userTrainingProgress.quizAnswers = answers;
            userTrainingProgress.completedAt = Date.now();
            userTrainingProgress.status = passed ? 'completed' : 'failed';
            
            // Mostrar resultado
            showQuizResult(passed, score, currentTrainingData.quiz.questions.length);
        })
        .catch(error => {
            console.error("Erro ao salvar quiz:", error);
            alert('Ocorreu um erro ao salvar suas respostas. Por favor, tente novamente.');
        });
}

// Mostra o resultado do quiz
function showQuizResult(passed, score, totalQuestions) {
    const quizContainer = document.getElementById('quizContainer');
    quizContainer.innerHTML = '';
    
    const resultDiv = document.createElement('div');
    resultDiv.className = passed ? 'quiz-passed' : 'quiz-failed';
    
    const resultIcon = document.createElement('i');
    resultIcon.className = 'material-icons';
    resultIcon.textContent = passed ? 'check_circle' : 'error';
    
    const resultTitle = document.createElement('h2');
    resultTitle.textContent = passed ? 'Parabéns! Você passou no teste.' : 'Você não atingiu a pontuação mínima.';
    
    const resultScore = document.createElement('p');
    resultScore.textContent = `Sua pontuação: ${score} de ${totalQuestions} (${Math.round((score/totalQuestions)*100)}%)`;
    
    const resultMessage = document.createElement('p');
    resultMessage.textContent = passed ? 
        'Você concluiu com sucesso este treinamento. Seu certificado estará disponível em seu perfil.' :
        'Você pode tentar novamente após revisar o material.';
    
    resultDiv.appendChild(resultIcon);
    resultDiv.appendChild(resultTitle);
    resultDiv.appendChild(resultScore);
    resultDiv.appendChild(resultMessage);
    
    if (!passed) {
        const retryButton = document.createElement('button');
        retryButton.textContent = 'Tentar Novamente';
        retryButton.addEventListener('click', () => {
            // Resetar progresso do quiz
            database.ref(`userTrainings/${currentUser.uid}/${currentTrainingId}`).update({
                quizCompleted: false,
                quizScore: null,
                quizAnswers: null,
                completedAt: null,
                status: 'in_progress'
            }).then(() => {
                // Atualizar localmente
                userTrainingProgress.quizCompleted = false;
                userTrainingProgress.quizScore = null;
                userTrainingProgress.quizAnswers = null;
                userTrainingProgress.completedAt = null;
                userTrainingProgress.status = 'in_progress';
                
                // Mostrar quiz novamente
                showQuiz();
            });
        });
        resultDiv.appendChild(retryButton);
    }
    
    quizContainer.appendChild(resultDiv);
    
    // Se passou, mostrar tela de conclusão
    if (passed) {
        showTrainingCompletion();
    }
}

// Mostra a tela de conclusão do treinamento
function showTrainingCompletion() {
    const trainingCompleted = document.getElementById('trainingCompleted');
    const videosContainer = document.getElementById('videosContainer');
    const quizContainer = document.getElementById('quizContainer');
    
    // Esconder outros elementos
    videosContainer.style.display = 'none';
    quizContainer.style.display = 'none';
    
    // Mostrar tela de conclusão
    trainingCompleted.style.display = 'block';
    
    // Calcular validade do certificado
    if (currentTrainingData.validityMonths) {
        const completedDate = new Date(userTrainingProgress.completedAt || Date.now());
        const expiryDate = new Date(completedDate);
        expiryDate.setMonth(expiryDate.getMonth() + currentTrainingData.validityMonths);
        
        const validityMessage = document.getElementById('validityMessage');
        validityMessage.textContent = `Seu certificado é válido por ${currentTrainingData.validityMonths} meses, até ${expiryDate.toLocaleDateString('pt-BR')}.`;
    }
}

// Event listeners para o menu
document.getElementById('menuHome').addEventListener('click', () => {
    window.location.href = 'home.html';
});

document.getElementById('menuProfile').addEventListener('click', () => {
    window.location.href = 'profile.html';
});

document.getElementById('menuCompleted').addEventListener('click', () => {
    window.location.href = 'completed.html';
});

document.getElementById('menuLogout').addEventListener('click', () => {
    auth.signOut().then(() => {
        window.location.href = 'index.html';
    });
});
